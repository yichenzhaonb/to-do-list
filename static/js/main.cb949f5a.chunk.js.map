{"version":3,"sources":["components/Form.js","components/Todo.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","trim","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","Search","keyword","setKeyword","placeholder","console","log","filterTask","App","tasks","setTasks","editedTasks","map","task","remainTasks","filter","taskList","includes","key","newTask","nanoid","complete","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb949f5a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\nfunction Form(props){\r\n    const [name,setName] = useState('');\r\n    function handleSubmit(e){\r\n       e.preventDefault();\r\n       if(!name.trim()){\r\n           return;\r\n       }\r\n       props.addTask(name);\r\n       setName(\"\");\r\n    }\r\n \r\n    function handleChange(e){\r\n        setName (e.target.value); \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2 className=\"label-wrapper\">\r\n            <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n              Whats in your mind today?\r\n            </label>\r\n          </h2>\r\n\r\n          <input\r\n            type=\"text\"\r\n            id=\"new-todo-input\"\r\n            className=\"input input__lg\"\r\n            name=\"text\"\r\n            autoComplete=\"off\"\r\n            value={name}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n            Add\r\n          </button>\r\n        </form>\r\n      );\r\n\r\n}\r\n\r\nexport default Form;","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!newName.trim()) {\r\n      return;\r\n    }\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}","import React, { useState } from \"react\";\r\n\r\nfunction Search(props){\r\n    const [keyword,setKeyword] = useState('');\r\n    function handleChange(e){\r\n        console.log(e.target.value);\r\n        setKeyword (e.target.value); \r\n        props.filterTask(e.target.value);\r\n    }\r\n\r\n    return (\r\n          <input\r\n            type=\"text\"\r\n            id=\"new-todo-search\"\r\n            className=\"input input__lg\"\r\n            name=\"text\"\r\n            autoComplete=\"off\"\r\n            placeholder =\"Search for a task...\"\r\n            value={keyword}\r\n            onChange={handleChange}\r\n          />\r\n\r\n      );\r\n\r\n}\r\n\r\nexport default Search;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Form from \"./components/Form\";\r\nimport Todo from \"./components/Todo\";\r\nimport Search from \"./components/Search\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nfunction App(props) {\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n\r\n  function addTask(name) {\r\n    let newTask = {\r\n      id: \"todo-\" + nanoid(),\r\n      name: name,\r\n      complete: false\r\n    };\r\n\r\n    setTasks([...tasks, newTask]);\r\n\r\n  }\r\n\r\n  function editTask(id, newName) {\r\n\r\n    const editedTasks = tasks.map(task => {\r\n\r\n      if (id === task.id) {\r\n\r\n        return { ...task, name: newName };\r\n      }\r\n      return task;\r\n\r\n    });\r\n\r\n    setTasks(editedTasks);\r\n  }\r\n\r\n  function deleteTask(id) {\r\n\r\n    const remainTasks = tasks.filter(task => task.id !== id);\r\n    setTasks(remainTasks);\r\n\r\n  }\r\n\r\n  function filterTask(keyword) {\r\n    setKeyword(keyword);\r\n  }\r\n\r\n\r\n\r\n  const taskList = tasks.filter(task => keyword ? task.name.includes(keyword): true).map(task => (\r\n    <Todo\r\n      id={task.id}\r\n      name={task.name}\r\n      completed={task.completed}\r\n      key={task.id}\r\n      deleteTask={deleteTask}\r\n      editTask={editTask}\r\n    />\r\n  ));\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          To Do List\r\n        </p>\r\n      </header>\r\n      <div className=\"Content\">\r\n        <Form addTask={addTask} />\r\n        <Search filterTask={filterTask} />\r\n        <ul\r\n          className=\"todo-list stack-large stack-exception\"\r\n          aria-labelledby=\"list-heading\"\r\n        >\r\n          {taskList}\r\n        </ul>\r\n      </div>\r\n      <div className=\"Footer\">\r\n        {/* add footer */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst DATA = [\r\n  { id: \"todo-0\", name: \"Eat\", completed: true },\r\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\r\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\r\n];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App tasks={DATA}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}